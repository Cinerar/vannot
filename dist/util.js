const{select}=require("d3"),{floor,min,max,sqrt,pow}=Math,$=require("jquery"),Polygon=require("polygon"),PolygonTools=require("polygon-tools"),clamp=(e,t,n)=>t<e?e:t>n?n:t,square=e=>pow(e,2),last=e=>e[e.length-1],spliceOut=(e,t)=>{const n=t.indexOf(e);n>=0&&t.splice(n,1)},immediate=e=>(e(),e),getTemplate=e=>select(`#vannot-templates .vannot-${e}`),instantiateTemplates=(e,t)=>{e.exit().remove();const n=e.enter().append((()=>t.clone(!0).node()));return e.merge(n)},instantiateElems=(e,t,n)=>{e.exit().remove();const a=e.enter().append(t);return null!=n&&a.classed(n,!0),e.merge(a)},instantiateDivs=(e,t)=>instantiateElems(e,"div",t),px=e=>`${e}px`,pct=e=>100*e+"%",datum=e=>select(e[0]).datum(),duration={seconds:(e,t)=>e/t,minutes:(e,t)=>e/t/60,hours:(e,t)=>e/t/60/60},pad=e=>e<10?`0${e}`:e,timecode=(e,t)=>{const n=60*t,a=60*n;return{hh:floor(e/a),mm:floor(e%a/n),ss:floor(e%n/t),frame:e%t}},timecodePretty=(e,t,n=!1)=>{const a=timecode(e,t);let o=[];return a.hh>0&&o.push(a.hh),o.push(a.mm,a.ss),o=o.map(pad).join(":"),!0===n&&(o+=`.${a.frame}`),o},$document=$(document),initiateDrag=(e,t,n)=>{if(e.isDefaultPrevented())return;if(0!==e.button)return;e.preventDefault();const a=e.pageX,o=e.pageY;let i;$document.on("mousemove.draggable",(e=>{i=t(e.pageX-a,e.pageY-o,i)})),$document.one("mouseup",(()=>{$document.off("mousemove.draggable"),"function"==typeof n&&n(i)}))},draggable=(e,t)=>{e.on("mousedown",(e=>{initiateDrag(e,t)}))},byDelta=e=>(t,n,{lastx:a=0,lasty:o=0}={})=>(e(t-a,n-o),{lastx:t,lasty:n}),defer=e=>setTimeout(e,0),queuer=e=>{let t=!1;return()=>{!0!==t&&(t=!0,window.requestAnimationFrame((()=>{t=!1,e()})))}},pointsEqual=(e,t)=>e.x===t.x&&e.y===t.y,distance=(e,t)=>sqrt(square(e.x-t.x)+square(e.y-t.y)),midpoint=(e,t)=>({x:(e.x+t.x)/2,y:(e.y+t.y)/2}),digestPoint=e=>`${e.x} ${e.y}`,normalizeBox=e=>[{x:min(e[0].x,e[1].x),y:min(e[0].y,e[1].y)},{x:max(e[0].x,e[1].x),y:max(e[0].y,e[1].y)}],withinBox=(e,t)=>{const n=normalizeBox(e);return n[0].x<=t.x&&t.x<=n[1].x&&n[0].y<=t.y&&t.y<=n[1].y},pointsToArrays=e=>e.map((({x:e,y:t})=>[e,t])),arraysToPoints=e=>e.map((([e,t])=>({x:e,y:t}))),expand=(e,t)=>new Polygon(e).offset(20).points,unionAll=e=>PolygonTools.polygon.union(...e.map(pointsToArrays)).map(arraysToPoints),getQuerystringValue=e=>decodeURIComponent(new URL(window.location).searchParams.get(e));module.exports={clamp,last,spliceOut,immediate,getTemplate,instantiateTemplates,instantiateElems,instantiateDivs,px,pct,datum,pad,timecode,timecodePretty,initiateDrag,draggable,byDelta,defer,queuer,pointsEqual,distance,midpoint,digestPoint,normalizeBox,withinBox,pointsToArrays,arraysToPoints,expand,unionAll,getQuerystringValue};